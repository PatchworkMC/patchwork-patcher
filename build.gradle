apply plugin: 'application'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven-publish'

sourceCompatibility = 1.8
version = '0.1.0'

def ENV = System.getenv()
if (ENV.BUILD_NUMBER) {
	version = version + "." + "${System.getenv().BUILD_NUMBER}"
}

group = 'net.coderbot'
archivesBaseName = 'patchwork'

repositories {
	mavenCentral()
	maven {
		name = 'Fabric'
		url = 'http://maven.modmuss50.me/'
	}
}

dependencies {
	implementation 'org.ow2.asm:asm:7.1'
	implementation 'org.ow2.asm:asm-analysis:7.1'
	implementation 'org.ow2.asm:asm-commons:7.1'
	implementation 'org.ow2.asm:asm-tree:7.1'
	implementation 'org.ow2.asm:asm-util:7.1'

	implementation 'net.fabricmc:tiny-mappings-parser:0.1.1.9'
	implementation 'net.fabricmc:tiny-remapper:0.2.0.48'

	implementation 'com.electronwill.night-config:toml:3.6.0'

	implementation 'com.google.code.gson:gson:2.8.5'

	implementation 'org.fusesource.jansi:jansi:1.18'
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

publishing {
	publications {
		maven(MavenPublication) {
			groupId 'net.coderbot'
			artifactId "patchwork"
			version version

			artifact (jar)
			artifact (sourcesJar)
		}
	}
}

application {
	mainClassName "net.coderbot.patchwork.Patchwork"
}

task format {
	doLast {
		def clangFormatCommand = project.hasProperty("clangFormat") ? project.getProperty("clangFormat") : "clang-format"

		if(exec {
			executable clangFormatCommand
			args "-version"
		}.exitValue != 0) {
			throw new GradleException("clang-format -version exited with non 0 exit code")
		}

		sourceSets.main.java.filter{ f -> f.getName().endsWith(".java") && f.isFile() }.forEach { f ->
			logger.info("Formatting ${f.getAbsolutePath()}")

			def result = exec {
				executable clangFormatCommand
				args "-style=file", "-i", f.getAbsolutePath()
			}

			if(result.exitValue != 0) {
				throw new GradleException("Failed to format: clang-format exited with code ${result.exitValue}")
			}
		}
	}
}

tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

def runDir = file("run")

if(!runDir.exists() && !runDir.mkdirs()) {
	throw new IOException("Failed to create run directory ${runDir.getAbsolutePath()}")
}

run {
	workingDir runDir
}